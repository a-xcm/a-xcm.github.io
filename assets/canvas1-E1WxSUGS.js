import{b as p,d as c,o as k,c as y,w as m,r as b,a as C}from"./index-CSnXhSwV.js";function _(){const s=e=>{if(!e||!e.canvas)throw new Error("Invalid canvas context");return e};return{drawLine:(e,{x1:a=0,y1:r=0,x2:n=0,y2:o=0,color:l="black",lineWidth:d=1}={})=>(e=s(e),e.beginPath(),e.moveTo(a,r),e.lineTo(n,o),e.strokeStyle=l,e.lineWidth=d,e.stroke(),e),drawCircle:(e,{x:a=0,y:r=0,r:n=0,color:o="black"}={})=>(e=s(e),e.beginPath(),e.arc(a,r,n,0,2*Math.PI,!1),e.fillStyle=o,e.fill(),e),drawCircle2:(e,{x:a=0,y:r=0,r:n=0,color:o="black",lineWidth:l=1}={})=>(e=s(e),e.beginPath(),e.lineWidth=l,e.arc(a,r,n,0,2*Math.PI,!1),e.strokeStyle=o,e.stroke(),e),drawRect:(e,{x:a=0,y:r=0,w:n=0,h:o=0,color:l="black"}={})=>(e=s(e),e.beginPath(),e.rect(a,r,n,o),e.fillStyle=l,e.fill(),e),drawText:(e,{text:a="",x:r=0,y:n=0,color:o="black",fontSize:l=16,fontFamily:d="Arial"}={})=>{if(e=s(e),typeof l!="number"||typeof d!="string")throw new Error("Invalid font size or family");return e.font=`${l}px ${d}`,e.fillStyle=o,e.fillText(a,r,n),e},drawText2:(e,{text:a="",x:r=0,y:n=0,color:o="black",fontSize:l=16,fontFamily:d="Arial"}={})=>{if(e=s(e),typeof l!="number"||typeof d!="string")throw new Error("Invalid font size or family");e.font=`${l}px ${d}`,e.strokeStyle=o,e.strokeText(a,r,n)},drawImage:(e,{img:a,x:r=0,y:n=0,w:o=0,h:l=0}={})=>{if(e=s(e),!(a instanceof HTMLImageElement)||!a.complete)throw new Error("Invalid or incomplete image");return e.drawImage(a,r,n,o,l),e},drawBackground:(e,{color:a="white"}={})=>(e=s(e),e.beginPath(),e.rect(0,0,e.canvas.width,e.canvas.height),e.fillStyle=a,e.fill(),e),clearCanvas:e=>(e=s(e),e.clearRect(0,0,e.canvas.width,e.canvas.height),e)}}const P={__name:"canvas1",setup(s){const f=_(),h=p(null);c(()=>{const t=h.value;if(t.getContext){const w=t.getContext("2d");g(w)}else console("canvas not supported")});const g=t=>{f.drawBackground(t,{color:"#f40"}),f.drawCircle2(t,{x:150,y:150,r:146,color:"#000",lineWidth:2});let w=Math.PI;t.save(),t.translate(150,150);for(let i=0;i<12;i++){let u=Math.cos(w/6*i)*146,v=Math.sin(w/6*i)*146;console.log(u,v),f.drawLine(t,{x:0,y:0,x2:u,y2:v,color:"#000",lineWidth:2})}};return(t,w)=>{const i=b("layout");return k(),y(i,null,{default:m(()=>[C("canvas",{width:"300",height:"300",ref_key:"canvasRef",ref:h},null,512)]),_:1})}}};export{P as default};
